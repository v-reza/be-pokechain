generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(uuid())
  email         String   @unique
  username      String   @unique
  password      String
  refresh_token String?  @db.LongText
  profile       Profile?
}

model Profile {
  id           String          @id @default(uuid())
  increment_id Int             @unique @default(autoincrement())
  full_name    String?
  picture      String?
  balance      Int?
  tier         Int             @default(1)
  point        Int             @default(0)
  total_sales  Int             @default(0)
  created_at   DateTime        @default(now())
  updated_at   DateTime        @updatedAt
  user_id      String          @unique
  user         User            @relation(fields: [user_id], references: [id])
  market_place MarketPlace[]
  my_items     MyItems[]
  my_pokemons  MyPokemon[]
  transactions Transaction[]
  buyer        MarketPokemon[]
}

model MyPokemon {
  id             String           @id @default(uuid())
  created_at     DateTime         @default(now())
  updated_at     DateTime         @updatedAt
  is_sell        Boolean          @default(false)
  profile_id     String?
  profile        Profile?         @relation(fields: [profile_id], references: [id])
  detail_pokemon MyDetailPokemon?

  @@index([profile_id], map: "MyPokemon_profile_id_fkey")
}

model MyDetailPokemon {
  id                String    @id @default(uuid())
  name              String?
  health            Int
  attack            Int
  defense           Int
  level             Int?
  my_pokemon_id     String    @unique
  element           String
  front_default     String
  front_default_gif String
  back_default_gif  String
  my_pokemon        MyPokemon @relation(fields: [my_pokemon_id], references: [id])
}

model Pokemon {
  id                 Int                @id @default(autoincrement())
  name               String
  created_at         DateTime?          @default(now())
  updated_at         DateTime?          @updatedAt
  attack             Int
  defense            Int
  health             Int
  element            String
  back_default_gif   String
  front_default      String
  front_default_gif  String
  level              Int                @default(1)
  pokemon_evolutions PokemonEvolution[]
}

model PokemonEvolution {
  id                Int       @id @default(autoincrement())
  pokemon_id        Int
  name              String
  health            Int
  attack            Int
  defense           Int
  level             Int       @default(1)
  created_at        DateTime? @default(now())
  updated_at        DateTime? @updatedAt
  element           String
  back_default_gif  String
  front_default     String
  front_default_gif String
  qty_required_item Int?
  required_item     String?
  pokemon           Pokemon   @relation(fields: [pokemon_id], references: [id])

  @@index([pokemon_id], map: "PokemonEvolution_pokemon_id_fkey")
}

model Arena {
  id         String   @id @default(uuid())
  name       String
  point      Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model MarketPlace {
  id             String          @id @default(uuid())
  type           String
  seller_id      String
  created_at     DateTime        @default(now())
  updated_at     DateTime        @updatedAt
  seller         Profile         @relation(fields: [seller_id], references: [id])
  market_bundles MarketBundles[]
  market_items   MarketItems[]
  market_pokemon MarketPokemon[]
  market_token   MarketToken[]

  @@index([seller_id], map: "MarketTopSales_seller_id_fkey")
}

model MarketPokemon {
  id                String      @id @default(uuid())
  marketplace_id    String
  buyer_id          String
  price             Int
  name              String
  attack            String
  defense           String
  level             Int
  element           String
  front_default     String
  front_default_gif String
  back_default_gif  String
  status            String
  buyer             Profile?    @relation(fields: [buyer_id], references: [id])
  marketplace       MarketPlace @relation(fields: [marketplace_id], references: [id])
}

model MarketItems {
  id             String      @id @default(uuid())
  marketplace_id String
  price          Int
  name           String
  rarity         String
  marketplace    MarketPlace @relation(fields: [marketplace_id], references: [id])
}

model MarketBundles {
  id             String               @id @default(uuid())
  marketplace_id String
  price          Int
  marketplace    MarketPlace          @relation(fields: [marketplace_id], references: [id])
  bundles_items  MarketBundlesItems[]
}

model MarketBundlesItems {
  id              String        @id @default(uuid())
  marketbundle_id String
  item_name       String
  marketbundles   MarketBundles @relation(fields: [marketbundle_id], references: [id])
}

model MarketToken {
  id             String      @id @default(uuid())
  marketplace_id String
  price          Int
  token          Int
  marketplace    MarketPlace @relation(fields: [marketplace_id], references: [id])
}

model Transaction {
  id             String                    @id @default(uuid())
  profile_id     String
  status         String
  price          Int
  order_id       String
  user           Profile                   @relation(fields: [profile_id], references: [id])
  detail_pokemon TransactionDetailPokemon?

  @@index([profile_id], map: "Transaction_profile_id_fkey")
}

model TransactionDetailPokemon {
  id                  String      @id @default(uuid())
  transaction_id      String      @unique
  name                String?
  health              Int
  attack              Int
  defense             Int
  level               Int?
  element             String
  front_default       String
  front_default_gif   String
  back_default_gif    String
  transaction_pokemon Transaction @relation(fields: [transaction_id], references: [id])
}

model MyItems {
  id           String   @id @default(uuid())
  profile_id   String
  name         String
  quantity     Int
  created_at   DateTime @default(now())
  updated_at   DateTime
  detail_items Items    @relation(fields: [name], references: [name])
  user         Profile  @relation(fields: [profile_id], references: [id])

  @@index([profile_id], map: "MyItems_profile_id_fkey")
  @@index([name], map: "MyItems_name_fkey")
}

model Items {
  id      Int       @id @default(autoincrement())
  name    String    @unique
  img     String
  MyItems MyItems[]
}
